
var status;
var eff ="#fUI/UIWindow/Quest/icon6/7#";
var bili = 3000;

function start() {
    status = -1;
    action(1, 0, 0);
}

function action(mode, type, selection) {
    if (mode == -1) {
        cm.dispose();
    } else {
        if (mode == 0 && status == 0) {
            cm.dispose();
            return;
        }
        if (mode == 1) {
            status++;
        } else {
            if (status == 0) {
                cm.sendNext("如果您需要点卷中介的话，那么请下次来找我！");
                cm.dispose();
            }
            status--;
        }
        if (status == 0) {
            cm.sendSimple("#fUI/UIWindow2.img/QuestAlarm/BtQ/normal/0#亲爱的#r#h ##k您好，这里可以将余额兑换为点券\r\n  兑换比例 1:" + bili + ",请想好了再兑换哦!!!\r\n\r\n  您当前余额为:#r " + getRMB() + " #k元\r\n  您当前点券为:#r " + cm.getNX(1) + "#k点\r\n#b#L0#" + eff + "我要兑换点券#l\r\n");
        } else if (status == 1) {
            cm.sendGetNumber("#e#r请输入您要兑换多少余额：(兑换比例为1:" + bili + ")\r\n\r\n ", 1, 1, 1000);
        } else if (status == 2) {
            if (selection < 1 || selection > 1000) {
                cm.sendOk("所填数字非法，请重新输入");
                status = 0;
            } else if (getRMB() < selection) {
                cm.sendOk("你没有那么多的余额，请重新输入");
                status = 0;
            } else {
                gainRMB(-selection);
                cm.gainNX(1, selection * bili);
                cm.sendOk("#e恭喜你成功将#r " + selection + " 余额 #k兑换成 #r" + (selection * bili) + " 点券#k\r\n\r\n#b祝你游戏愉快！");
                cm.dispose();
            }
            status = -1;
        }
    }
}

function getRMB() {
	var ret = 0;
	var conn = cm.getConnection();
    var UpDateData = conn.prepareStatement("SELECT rmb FROM accounts WHERE id = ?");
    UpDateData.setInt(1, cm.getPlayer().getAccountID());
	var rs = UpDateData.executeQuery();
	if (rs.next())
	{
		ret = rs.getInt("rmb");
	}
	UpDateData.close();
	return ret;
}

function gainRMB(times) {
	var conn = cm.getConnection();
    var UpDateData = conn.prepareStatement("UPDATE accounts SET rmb = rmb + ? WHERE id = ?");
    UpDateData.setInt(1, times);
    UpDateData.setInt(2, cm.getPlayer().getAccountID());
	UpDateData.executeUpdate();
	UpDateData.close();
}






/* 
 * NPC   : Dev Doll
 * Map   : GMMAP


var status = 0;
var invs = Array(1, 5);
var invv;
var selected;
var slot_1 = Array();
var slot_2 = Array();
var statsSel;

function start() {
	action(1,0,0);
}

function action(mode, type, selection) {
	if (mode != 1) {
		cm.dispose();
		return;
	}
	status++;
	if (status == 1) {
		var bbb = false;
		var rmb = getRMB();
		var selStr = "I can help you drop a cash item where you stand:\r\n\r\n#b\r\n\r\nRMB:" + rmb + "\r\n";
		for (var x = 0; x < invs.length; x++) {
			var inv = cm.getInventory(invs[x]);
			for (var i = 0; i <= inv.getSlotLimit(); i++) {
				if (x == 0) {
					slot_1.push(i);
				} else {
					slot_2.push(i);
				}
				var it = inv.getItem(i);
				if (it == null) {
					continue;
				}
				var itemid = it.getItemId();
				if (!cm.isCash(itemid)) {
					continue;
				}
				bbb = true;
				selStr += "#L" + ((invs[x] * 1000) + i) + "##v" + itemid + "##t" + itemid + "##l\r\n";
			}
		}
		if (!bbb) {
			cm.sendOk("You don't have any cash items.");
			cm.dispose();
			return;
		}
		cm.sendSimple(selStr + "#k");
	} else if (status == 2) {
		invv = (selection / 1000) | 0;
		selected = (selection % 1000) | 0;
		var inzz = cm.getInventory(invv);
		if (selected >= inzz.getSlotLimit()) { 
			cm.sendOk("Error, please try again.");
			cm.dispose();
			return;
		}
		if (invv == invs[0]) {
			statsSel = inzz.getItem(slot_1[selected]);
		} else if (invv == invs[1]) {
			statsSel = inzz.getItem(slot_2[selected]);
		}
		if (statsSel == null) {
			cm.sendOk("Error, please try again.");
			cm.dispose();
			return;
		}
		cm.sendGetNumber("You want to drop #v" + statsSel.getItemId() + "##t" + statsSel.getItemId() + "#.\r\nHow many?", 1, 1, statsSel.getQuantity());
	} else if (status == 3) {
		if (!cm.dropItem(selected, invv, selection)) {
			cm.sendOk("Error, please try again!");
			cm.dispose();
		} else {
			status = 0;
			action(1, 0, 0);
		}
	}
}

function getRMB() {
	var ret = 0;
	var conn = cm.getConnection();
    var UpDateData = conn.prepareStatement("SELECT rmb FROM accounts WHERE id = ?");
    UpDateData.setInt(1, cm.getPlayer().getAccountID());
	var rs = UpDateData.executeQuery();
	if (rs.next())
	{
		ret = rs.getInt("rmb");
	}
	UpDateData.close();
	return ret;
}
 */